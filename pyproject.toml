[tool.poetry]
name = "ece661-mmseg"
version = "0.1.0"
description = "ECE 661 project for transfer learning"
authors = ["David Hunt <david.hunt@duke.edu>"]
license = "MIT"
readme = "README.md"
packages = [{include = "ece661_mmseg"}]

[tool.poetry.dependencies]
python = "~3.10"
imutils = "^0.5.4"
natsort = "^8.4.0"
albumentations = "^1.3.1"
imageio = {extras = ["ffmpeg"], version = "^2.31.1"}
addict = "~2.4.0"
numpy = ">=1.20, <1.24"
filterpy = "^1"
scipy = "^1.9"
cython = "^0.29"
numpy-quaternion = "^2022.4"
numba = "~0.57.1"
seaborn = "~0.12.2"
Pillow = "^9"
opencv-python = ">=4.3, <4.7"
tqdm = "^4"
scikit-learn = "^1.1"
torch = { url = "https://download.pytorch.org/whl/cu117/torch-1.13.1%2Bcu117-cp310-cp310-linux_x86_64.whl" }
torchvision = { url = "https://download.pytorch.org/whl/cu117/torchvision-0.14.1%2Bcu117-cp310-cp310-linux_x86_64.whl" }
mmcv = { url = "https://g-b0ef78.1d0d8d.03c0.data.globus.org/packages/mmcv/torch1.13.1_cu11.7/mmcv-2.0.1-cp310-cp310-linux_x86_64.whl" }
mmengine = "^0.7.3"
mmsegmentation = { path = "./submodules/mmsegmentation", develop = true }
# serve dependencies
torchserve = {version="~0.8.2", optional=true}
torch-model-archiver = {version="~0.8.2", optional=true}
torch-workflow-archiver = {version="~0.2.10", optional=true}
nvgpu = {version="~0.10.0", optional=true}
mmdeploy-runtime-gpu = {version="^1.2.0", optional=true}
mmdeploy = {version="^1.2.0", optional=true}
onnxruntime-gpu = {version="~1.15.1", optional=true}
tensorrt = {version="~8.5.3.1", optional=true}  # NOTE: to appropriately use, we need to download the same version tar package manually
nvidia-cudnn-cu11 = {version="8.9.4.25", optional=true}
matplotlib = "^3.8.1"


[tool.poetry.dev-dependencies]
gdown = "^4.6.4"
ipywidgets = "^8.0"
jupyter = "^1.0.0"

[tool.poetry.group.test.dependencies]
pytest = "^7"
pytest-cov = "^4"
bandit = "^1.7"
black = "~22.12.0"
mypy = "^0"
isort = "^5.11"
flake8 = "^5.0"
snakeviz="^2.1.1"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q -s"
testpaths = [
    "tests",
    "integration",
]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
